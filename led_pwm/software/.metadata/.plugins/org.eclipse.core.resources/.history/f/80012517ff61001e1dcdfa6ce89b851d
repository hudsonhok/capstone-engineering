/*
#include <stdio.h>
#include <unistd.h>
#include <system.h>
#include "system.h"
#include "altera_avalon_pio_regs.h"
#include "alt_types.h"

#define KEYS_BASE 0x10001040

int main() {

	alt_u32 current_value;
	alt_u32 current_state;
	alt_u8 current_direction;
	alt_u32 keys;
	current_state=3;
	current_value=1;
	current_direction=0;
	printf ("Program running (UART)...\n");

	while (1) {
		// read the current state of the keys

		keys=IORD_ALTERA_AVALON_PIO_DATA(KEYS_BASE);
		// switch speed if necessary
		if ((keys != 7) && (keys != current_state)) {
			if (keys == 3) printf ("speed set to 250 ms\n");
			else if (keys == 5) printf ("speed set to 150 ms\n");
			else if (keys == 6) printf ("speed set to 50 ms\n");
			current_state=keys;
		}

		// switch direction if necessary
		if ((current_direction==0) && (current_value==(1 << 25))) current_direction=1;
		else if ((current_direction==1) && (current_value==1)) current_direction=0;

		// move light
		else if (current_direction==0) current_value = current_value << 1;
		else current_value = current_value >> 1;

		// update lights
		IOWR_ALTERA_AVALON_PIO_DATA(LEDS_BASE,current_value);

		// wait
		if (current_state==3) usleep (250000);
		else if (current_state==5) usleep (125000);
		else usleep (50000);
	}
}
*/


#include <stdio.h>
#include <system.h>
#include <math.h>
#include <io.h>
#include <alt_types.h>
#include "sys/alt_stdio.h"
#include <altera_avalon_performance_counter.h>

#define LEDS_BASE 0x10001050
#define PERFORMANCE_COUNTER_0_BASE 0x10001000

int main() {
    float pwm_freq = 10e3f;
    float dim_period = 2.0f;
    alt_putstr("OOF from NIOS II");

    alt_u64 pwm_duty_cycle;
    alt_u64 cnt;
    alt_u64 count;
    alt_u64 pwm_period_cycles,duty_cycle_cycles,dim_period_cycles;
    alt_u32 lights;

    alt_u64 last_adj_cycles = 0;
    alt_u64 dim_adj_cycles = dim_period / 200.f * ALT_CPU_CPU_FREQ;

    //useful periods in clock cycles
    dim_period_cycles = dim_period * ALT_CPU_CPU_FREQ;
    pwm_period_cycles = 1.f/pwm_freq * ALT_CPU_CPU_FREQ;

    //prepare performance counter
        IOWR(PERFORMANCE_COUNTER_0_BASE, 1, 0);

    while (1) {
        //take 64 bit counter, split into 2 32 bit sections
        union {
            struct {
                alt_u32 lo;
                alt_u32 hi;
            } parts;
            alt_u64 raw;
        } cnt;

        cnt.parts.hi = IORD(PERFORMANCE_COUNTER_0_BASE, 1);
        cnt.parts.lo = IORD(PERFORMANCE_COUNTER_0_BASE, 0);
        count = cnt.raw;


        if (count - last_adj_cycles > dim_adj_cycles) {
            //figure out pwm_duty_cycle percentage as decimal
            float pwm_duty_cycle = fabs((count % dim_period_cycles) * (-2.f/dim_period_cycles) + 1.0f);

            duty_cycle_cycles = (float)pwm_duty_cycle * pwm_period_cycles;
            last_adj_cycles = count;
        }

        //change lights depending on the cycle we're on
        if (count % pwm_period_cycles < duty_cycle_cycles)
            lights = 1;
        else
            lights = 0;

        IOWR(LEDS_BASE,0,0x3FFFFFFF * lights);
    }

    return 0;
}

